┌────────────────────────────────────────────────────────────────────────────┐
│  Framework Badge + ESP32 ProS3 Wiring Diagram (SAO Port/STEMMA QT)        │
│  Hardware: Unexpected Maker ESP32 ProS3                                   │
└────────────────────────────────────────────────────────────────────────────┘

SAO PORT CONNECTION (4-pin Standard v0.1)
═════════════════════════════════════════════════════════════════════════════

┌──────────────────────────────────────┐
│   Framework Badge (RP2040)           │
│                                      │
│   SAO Port (2x2 header on top)      │
│   ┌───┬───┐                          │
│   │ 1 │ 2 │  Pin 1: VCC (+3.3V)      │
│   ├───┼───┤  Pin 2: GND              │
│   │ 3 │ 4 │  Pin 3: SDA (IO#23/24)   │
│   └───┴───┘  Pin 4: SCL (IO#24/25)   │
│        │                             │
└────────┼─────────────────────────────┘
         │
         │ Physical connection
         │
┌────────┼─────────────────────────────┐
│        │    ESP32 ProS3              │
│        ▼                             │
│   ┌────────┐                         │
│   │  3V3   │ ← Pin 1 (VCC)           │
│   │  GND   │ ← Pin 2 (GND)           │
│   │ GPIO8  │ ← Pin 3 (SDA)           │
│   │ GPIO9  │ ← Pin 4 (SCL)           │
│   └────────┘                         │
│   OR use STEMMA QT connector!       │
└──────────────────────────────────────┘


DETAILED PIN MAPPING - ESP32 ProS3
═════════════════════════════════════════════════════════════════════════════

Framework Badge RP2040          ESP32 ProS3            Wire Color (Suggested)
─────────────────────────       ─────────────────      ────────────────────
SAO Pin 1: VCC (+3.3V)      →   3V3 pin                Red
SAO Pin 2: GND              →   GND                    Black
SAO Pin 3: SDA (IO#23)      →   GPIO 8 (SDA)           Green or Blue
SAO Pin 4: SCL (IO#24)      →   GPIO 9 (SCL)           Yellow

**ProS3 Features:**
- 16MB Flash (4× more storage than ESP32-C6)
- 8MB PSRAM (excellent for graphics and buffering)
- WiFi 802.11b/g/n (2.4GHz)
- BLE 5.0
- Xtensa dual-core @ 240MHz
- Dual 700mA LDOs (ultra-stable power)
- Built-in battery charging circuit
- STEMMA QT connector (GPIO8/GPIO9)
- RGB LED on GPIO48 for status
- Ultra-low 10µA deep sleep


ESP32 BOARD PINOUT REFERENCES
═══════════════════════════════════════════════════════════════════════════

ESP32 ProS3 (Unexpected Maker) - Recommended for this project
───────────────────────────────────────────────────────────────────────────

      ┌─────────────────────────────────────┐
      │        ESP32 ProS3                  │
      │   27 GPIOs, 16MB Flash, 8MB PSRAM   │
      │                                     │
      │  [USB-C]  [RGB LED]  [STEMMA QT]    │
      │                                     │
 GND ─┤ GND                             5V ├─ 5V
 3V3 ─┤ 3V3                            BAT ├─ VBAT
 IO0 ─┤ GPIO0                         IO17 ├─ GPIO17 (LDO2 EN)
 IO1 ─┤ GPIO1                         IO18 ├─ GPIO18
 IO2 ─┤ GPIO2                         IO21 ├─ GPIO21
 IO3 ─┤ GPIO3                         IO33 ├─ GPIO33
 IO4 ─┤ GPIO4                         IO34 ├─ GPIO34
 IO5 ─┤ GPIO5                         IO35 ├─ GPIO35
 IO6 ─┤ GPIO6                         IO36 ├─ GPIO36
 IO7 ─┤ GPIO7                         IO37 ├─ GPIO37
 IO8 ─┤ GPIO8  (SDA) ← STEMMA QT      IO38 ├─ GPIO38
 IO9 ─┤ GPIO9  (SCL) ← STEMMA QT      IO39 ├─ GPIO39
IO10 ─┤ GPIO10                        IO40 ├─ GPIO40
IO11 ─┤ GPIO11                        IO41 ├─ GPIO41
IO12 ─┤ GPIO12                        IO42 ├─ GPIO42
IO13 ─┤ GPIO13                        IO43 ├─ GPIO43 (TX)
IO14 ─┤ GPIO14                        IO44 ├─ GPIO44 (RX)
      │                                     │
      └─────────────────────────────────────┘

I2C for SAO Port: GPIO8 (SDA), GPIO9 (SCL)
Note: STEMMA QT connector already uses these pins!


XIAO ESP32-C6 / ESP32-S3 (Seeed Studio)
───────────────────────────────────────────────────────────────────────────

      ┌─────────────────────────┐
      │   XIAO ESP32-C6/S3      │
      │                         │
 5V ──┤ 5V                  BAT ├── VBAT
3V3 ──┤ 3V3                  D0 ├── GPIO1
GND ──┤ GND                  D1 ├── GPIO2
 D0 ──┤ GPIO1                D2 ├── GPIO3
 D1 ──┤ GPIO2                D3 ├── GPIO4
 D2 ──┤ GPIO3                D4 ├── GPIO6  ← SDA (I2C)
 D3 ──┤ GPIO4                D5 ├── GPIO7  ← SCL (I2C)
 D4 ──┤ GPIO6 (SDA)          D6 ├── GPIO21
 D5 ──┤ GPIO7 (SCL)          D7 ├── GPIO44
 D6 ──┤ GPIO21               D8 ├── GPIO43
 D7 ──┤ GPIO44               D9 ├── GPIO42
 D8 ──┤ GPIO43              D10 ├── GPIO41
 D9 ──┤ GPIO42               NC ├
D10 ──┤ GPIO41               NC ├
      │                         │
      └─────────────────────────┘

I2C for SAO Port: GPIO6 (SDA), GPIO7 (SCL)


I2C CONFIGURATION
═════════════════════════════════════════════════════════════════════════════

RP2040 (Master - Framework Badge):
  - SDA: GPIO 23 (or 24, configurable in firmware)
  - SCL: GPIO 24 (or 25, configurable in firmware)
  - Clock: 100kHz (standard I2C)
  - Pull-ups: 4.7kΩ on both SDA and SCL (may be internal)

ESP32 ProS3 (Slave - Option 1):
  - SDA: GPIO 8 (hardware I2C, STEMMA QT)
  - SCL: GPIO 9 (hardware I2C, STEMMA QT)
  - Address: 0x42
  - Pull-ups: Internal 45kΩ (external 4.7kΩ recommended for reliability)
  - Advantage: Can use STEMMA QT connector for plug-and-play connection!

XIAO ESP32-C6 or S3 (Slave - Option 2):
  - SDA: GPIO 6 (D4, hardware I2C)
  - SCL: GPIO 7 (D5, hardware I2C)
  - Address: 0x42
  - Pull-ups: Internal (can add external 4.7kΩ if needed)


SAO PORT PHYSICAL LAYOUT
═════════════════════════════════════════════════════════════════════════════

Top view of Framework Badge (looking down at SAO port):

                    ┌─────────┐
                    │  Badge  │
                    │  Front  │
                    │         │
              ┌─────┴─────────┴─────┐
              │                     │
              │     LED Matrix      │
              │                     │
              └─────────────────────┘
                         │
                    SAO Port ▼
                    ┌───┬───┐
                    │ 1 │ 2 │  (1=VCC, 2=GND)
                    ├───┼───┤
                    │ 3 │ 4 │  (3=SDA, 4=SCL)
                    └───┴───┘

Note: SAO port reuses Whisker header pins in 2x2 arrangement on TOP side
      Whisker ports are 1x5 headers on BOTTOM side


ASSEMBLY INSTRUCTIONS
═══════════════════════════════════════════════════════════════════════════

Option 1: ESP32 ProS3 with STEMMA QT Cable (Easiest!)
───────────────────────────────────────────────────────────────────────────
1. Solder 4-pin JST SH connector (STEMMA QT compatible) to badge SAO port
   - Pin 1 (VCC) → Black wire (GND on STEMMA QT standard)
   - Pin 2 (GND) → Red wire (3.3V on STEMMA QT standard)
   - Pin 3 (SDA) → Blue wire (SDA)
   - Pin 4 (SCL) → Yellow wire (SCL)

   **IMPORTANT:** SAO and STEMMA QT have different pinouts! You may need to
   rewire a STEMMA QT cable or create a custom adapter.

2. Plug STEMMA QT cable into ProS3's onboard STEMMA QT connector
3. No additional wiring needed!

Alternative for ProS3: Wire directly to GPIO8 (SDA) and GPIO9 (SCL)

Option 2: Direct Socket Connection (XIAO boards)
───────────────────────────────────────────────────────────────────────────
1. Solder 2x2 female header socket to SAO port location on badge (top side)
2. Solder 2x2 male header pins to XIAO ESP32-C6/S3
3. Align XIAO pins with SAO socket (verify Pin 1 = VCC!)
4. Press XIAO onto socket
5. Secure with hot glue or 3D-printed bracket (optional)

Option 3: Wired Connection (Any ESP32 board)
───────────────────────────────────────────────────────────────────────────
1. Solder 2x2 header to SAO port on badge
2. Use 4 jumper wires (10-15cm) to connect:

   For XIAO ESP32-C6/S3:
     Badge SAO Pin 1 → XIAO 3V3
     Badge SAO Pin 2 → XIAO GND
     Badge SAO Pin 3 → XIAO D4/GPIO6
     Badge SAO Pin 4 → XIAO D5/GPIO7

   For ESP32 ProS3:
     Badge SAO Pin 1 → ProS3 3V3
     Badge SAO Pin 2 → ProS3 GND
     Badge SAO Pin 3 → ProS3 GPIO8 (SDA)
     Badge SAO Pin 4 → ProS3 GPIO9 (SCL)

3. Mount ESP32 board separately (velcro, 3D printed case, etc.)

Option 4: Custom PCB
───────────────────────────────────────────────────────────────────────────
1. Design small PCB with:
     - 2x2 male header for SAO port
     - ESP32 board socket or pads
     - Optional: LED indicator, button, voltage regulator
2. Route traces based on your ESP32 board choice
3. Fabricate and assemble


POWER CONSIDERATIONS
═════════════════════════════════════════════════════════════════════════════

Current Draw by Component:
  - RP2040 (badge): 40-100mA
  - LED Matrix: 50-400mA (depends on brightness/pattern)

  XIAO ESP32-C6/S3:
    - WiFi off: 20-40mA
    - WiFi active: 80-200mA
    - Deep sleep: 10-150µA

  ESP32 ProS3:
    - WiFi off: 25-45mA
    - WiFi active: 90-180mA
    - Deep sleep: 10µA (ultra-low power mode)
    - Advantage: Dual LDOs provide better power stability

Total System Current:
  - Minimum (sleep): ~100mA
  - Typical (BLE only): ~200mA
  - Maximum (WiFi + LEDs): ~700mA

  ProS3 Advantage: Second LDO (IO17 controlled) auto-shuts down in deep sleep,
                   reducing power consumption further

Battery Life (2x AA = 2500mAh):
  - Sleep mode: 25+ hours
  - Typical use: 8-12 hours
  - Heavy use (WiFi): 3-5 hours

Recommendations:
  1. Monitor battery voltage (RP2040 GPIO 26)
  2. Disable WiFi when battery < 2.4V
  3. Use ESP32-S3 light sleep when idle
  4. Reduce LED brightness when battery low


TESTING PROCEDURE
═════════════════════════════════════════════════════════════════════════════

1. Verify Hardware Connections
   ──────────────────────────────────────────────────────────────────────
   □ Use multimeter to check continuity
   □ Verify VCC = 3.3V at XIAO (measure at 3V3 pin)
   □ Verify GND connection (0Ω resistance badge GND to XIAO GND)
   □ Check SDA/SCL connections (should be high-Z or 3.3V with pull-ups)

2. Upload Firmware
   ──────────────────────────────────────────────────────────────────────
   □ Upload ESP32_S3_Slave.ino to XIAO ESP32-S3 first
   □ Open Serial Monitor (115200 baud) - should see "I2C slave initialized"
   □ Upload RP2040_Master.ino to Framework Badge
   □ Open Serial Monitor - should see "ESP32-S3 connected!"

3. Test I2C Communication
   ──────────────────────────────────────────────────────────────────────
   On RP2040 Serial Monitor, send:
   □ 'p' - Ping ESP32-S3 (should respond "Connected")
   □ 's' - Get status (should show WiFi/BLE status)

4. Test WiFi
   ──────────────────────────────────────────────────────────────────────
   □ Press LEFT button on badge → WiFi scan
   □ Check ESP32-S3 serial monitor for network list
   □ Modify firmware to add your WiFi credentials (for auto-connect)

5. Test BLE
   ──────────────────────────────────────────────────────────────────────
   □ Press CENTER button on badge → Rainbow ripple + BLE beacon
   □ Use phone app (nRF Connect, BLE Scanner) to detect beacon
   □ Should see "MEOW" or custom beacon name

6. Test Web Server (if WiFi connected)
   ──────────────────────────────────────────────────────────────────────
   □ Send WiFi connect command with credentials
   □ Wait for connection (~5-10 seconds)
   □ Get ESP32-S3 IP address from serial monitor
   □ Open browser to http://[IP_ADDRESS]
   □ Should see "Framework Badge Control" page


TROUBLESHOOTING
═════════════════════════════════════════════════════════════════════════════

Issue: ESP32-S3 not responding to I2C
────────────────────────────────────────────────────────────────────────────
□ Check wiring (especially GND and power)
□ Verify I2C address matches (0x42 in both firmwares)
□ Try adding external 4.7kΩ pull-ups on SDA and SCL
□ Reduce I2C clock speed to 50kHz or 10kHz
□ Check for I2C address conflicts (use I2C scanner sketch)

Issue: ESP32-S3 keeps resetting
────────────────────────────────────────────────────────────────────────────
□ Add 10µF capacitor across 3.3V and GND near XIAO
□ Check if badge can supply enough current (measure with multimeter)
□ Disable WiFi/BLE temporarily to reduce current draw
□ Consider adding external 3.3V regulator

Issue: WiFi won't connect
────────────────────────────────────────────────────────────────────────────
□ Verify 2.4GHz network (ESP32 doesn't support 5GHz)
□ Check SSID and password in firmware
□ Move badge closer to router
□ Check router allows new client connections
□ Disable battery-saver modes that might brown-out ESP32

Issue: BLE beacon not visible
────────────────────────────────────────────────────────────────────────────
□ Check ESP32-S3 serial monitor for BLE start message
□ Ensure phone Bluetooth is enabled
□ Use dedicated BLE scanner app (nRF Connect recommended)
□ Check antenna orientation (XIAO has PCB antenna)
□ Verify no BLE address conflicts

Issue: Battery drains too fast
────────────────────────────────────────────────────────────────────────────
□ Reduce LED brightness (MAX_LED_BRIGHTNESS in firmware)
□ Disable WiFi when not needed
□ Use ESP32-S3 light sleep mode
□ Check for battery voltage and auto-disable features when low


SAFETY WARNINGS
═════════════════════════════════════════════════════════════════════════════

⚠ IMPORTANT:
  1. Verify VCC is 3.3V before connecting XIAO (NOT 5V!)
  2. Check polarity (Pin 1 = VCC, Pin 2 = GND)
  3. Don't reverse power connections - will damage ESP32-S3
  4. Use fresh AA batteries (old batteries may not supply enough current)
  5. Monitor battery voltage to prevent over-discharge
  6. Don't exceed 700mA total current draw
  7. Add capacitor across XIAO power pins for stability


ADDITIONAL RESOURCES
═════════════════════════════════════════════════════════════════════════════

XIAO ESP32-S3:
  - Wiki: https://wiki.seeedstudio.com/xiao_esp32s3_getting_started/
  - Pinout: https://files.seeedstudio.com/wiki/SeeedStudio-XIAO-ESP32S3/img/2.jpg
  - Schematic: https://files.seeedstudio.com/wiki/SeeedStudio-XIAO-ESP32S3/res/XIAO_ESP32S3_SCH_v1.1.pdf

SAO Standard:
  - Specification: https://hackaday.io/project/52950-shitty-add-ons
  - Examples: https://hackaday.io/list/163858-simple-add-ons-and-shitty-add-ons

I2C Protocol:
  - Tutorial: https://learn.sparkfun.com/tutorials/i2c
  - Arduino Wire Library: https://www.arduino.cc/en/Reference/Wire
